Question:01
you are tasked with building a login attempt tracker for a system that locksusers out after 3 consecutive failed login attempts within a 5 minute window.

Track consecutive "fail" attempts.

if there are 3 fails within 5 minutes return-LOCKED at<time of 3rd fail>

If the attempts dont meet the lock criteria, return - OK 

RUles:
A "Success" resets the failure count
timestamps are in chronological order
you cannot use collections like array or lists
you must manually parse timestamps.
do not use DateTime.Parse,split(),or LINQ

Example1:
Input: "success@10:00,fail@10:01,fail@10:05,success@10:10"
Output:"LOCKED at 10:05"

Example2:
Input: "fail@10:00,fail@10:06,success@10:07"
Output:"OK"

Example3:
Input: "fail@09:55,fail@09:56,success@09:58,fail@10:01,fail@10:04"
Output:"LOCKED at 10:04"


Question 02:
Problem: Design and implemet an LRU(Least Recently Used)cache that supports the following statement:
get(key):Return the value associated with the key if it exists in the cache, otherwise return -1.
put(key,value):Insert or update the value associated with the key.If the cache is full,evict the least recently used key.
your cache should support both get and put operations in O(1) time complexity.

Requirements:
Implement the solution using a Doubly Linked List and a hashMap(or Dictionary in C#).
The size of the cache should be configurable.

Approach: use a Doubly Linked List to keep track of the order of usage (most recent to least recent).

use a HashMap to map keys to the nodes in the linked list for fast lookups.

Example: cache Size -3
cache.put(1,10); // Cache:{1=10}
cache.put(2,20); // Cache:{1=10,2=20}
cache.put(3,30); // Cache:{1=10,2=20,3=30}

cache.get(1);//cache:{2=20,3=30,1=10} // prints:10
cache.put(4,40);//cache:{3=30,1=10,4=40}
cache.get(2); // prints:-1

